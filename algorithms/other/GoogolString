/*
https://codejam.withgoogle.com/codejam/contest/4374486/dashboard#s=p1

Problem
A "0/1 string" is a string in which every character is either 0 or 1. There are two operations that can be performed on a 0/1 string:

switch: Every 0 becomes 1 and every 1 becomes 0. For example, "100" becomes "011".
reverse: The string is reversed. For example, "100" becomes "001".
Consider this infinite sequence of 0/1 strings:

S0 = ""

S1 = "0"

S2 = "001"

S3 = "0010011"

S4 = "001001100011011"

...

SN = SN-1 + "0" + switch(reverse(SN-1)).

You need to figure out the Kth character of Sgoogol, where googol = 10100.

Input
The first line of the input gives the number of test cases, T. Each of the next T lines contains a number K.

Output
For each test case, output one line containing "Case #x: y", where x is the test case number (starting from 1) and y is the Kth character of Sgoogol.

Limits
1 ≤ T ≤ 100.
Small dataset
1 ≤ K ≤ 105.
Large dataset
1 ≤ K ≤ 1018.
Sample

Input

Output

4
1
2
3
10
*/

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Scanner;

public class GoogolString {
    private long pow2(long n) {
        long ret = 1L;
        for (int i = 0; i < n; ++i) {
            ret *= 2;
        }
        return ret;
    }

    private static final String s4 = "001001100011011";

    private int solve(int N, long k) {
        if (k <= s4.length()) return s4.charAt((int) k - 1) - '0';

        long len = pow2(N) - 1, lenHalf = len / 2;
        if (k == lenHalf + 1) return 0;
        else if (k <= lenHalf) return solve(N - 1, k);
        else if (k >= lenHalf) {
            if (solve(N - 1, 2 * lenHalf + 2 - k) == 1) return 0;
            return 1;
        }
        return 0;
    }

    public static void main(String[] args) {
        GoogolString gs = new GoogolString();
        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));
        int t = in.nextInt();
        for (int i = 1; i <= t; ++i) {
            long k = in.nextLong();
            // since K ≤ 10^18, which is less than the length of S_60
            System.out.println("Case #" + i + ": " + gs.solve(60, k));
        }
    }
}
